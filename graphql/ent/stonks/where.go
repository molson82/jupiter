// Code generated by entc, DO NOT EDIT.

package stonks

import (
	"entgo.io/ent/dialect/sql"
	"github.com/molson82/jupiter/graphql/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Symbol applies equality check predicate on the "symbol" field. It's identical to SymbolEQ.
func Symbol(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymbol), v))
	})
}

// PriceChange applies equality check predicate on the "PriceChange" field. It's identical to PriceChangeEQ.
func PriceChange(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriceChange), v))
	})
}

// SymbolEQ applies the EQ predicate on the "symbol" field.
func SymbolEQ(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymbol), v))
	})
}

// SymbolNEQ applies the NEQ predicate on the "symbol" field.
func SymbolNEQ(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSymbol), v))
	})
}

// SymbolIn applies the In predicate on the "symbol" field.
func SymbolIn(vs ...string) predicate.Stonks {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stonks(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSymbol), v...))
	})
}

// SymbolNotIn applies the NotIn predicate on the "symbol" field.
func SymbolNotIn(vs ...string) predicate.Stonks {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stonks(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSymbol), v...))
	})
}

// SymbolGT applies the GT predicate on the "symbol" field.
func SymbolGT(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSymbol), v))
	})
}

// SymbolGTE applies the GTE predicate on the "symbol" field.
func SymbolGTE(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSymbol), v))
	})
}

// SymbolLT applies the LT predicate on the "symbol" field.
func SymbolLT(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSymbol), v))
	})
}

// SymbolLTE applies the LTE predicate on the "symbol" field.
func SymbolLTE(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSymbol), v))
	})
}

// SymbolContains applies the Contains predicate on the "symbol" field.
func SymbolContains(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSymbol), v))
	})
}

// SymbolHasPrefix applies the HasPrefix predicate on the "symbol" field.
func SymbolHasPrefix(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSymbol), v))
	})
}

// SymbolHasSuffix applies the HasSuffix predicate on the "symbol" field.
func SymbolHasSuffix(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSymbol), v))
	})
}

// SymbolEqualFold applies the EqualFold predicate on the "symbol" field.
func SymbolEqualFold(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSymbol), v))
	})
}

// SymbolContainsFold applies the ContainsFold predicate on the "symbol" field.
func SymbolContainsFold(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSymbol), v))
	})
}

// PriceChangeEQ applies the EQ predicate on the "PriceChange" field.
func PriceChangeEQ(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPriceChange), v))
	})
}

// PriceChangeNEQ applies the NEQ predicate on the "PriceChange" field.
func PriceChangeNEQ(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPriceChange), v))
	})
}

// PriceChangeIn applies the In predicate on the "PriceChange" field.
func PriceChangeIn(vs ...string) predicate.Stonks {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stonks(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPriceChange), v...))
	})
}

// PriceChangeNotIn applies the NotIn predicate on the "PriceChange" field.
func PriceChangeNotIn(vs ...string) predicate.Stonks {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stonks(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPriceChange), v...))
	})
}

// PriceChangeGT applies the GT predicate on the "PriceChange" field.
func PriceChangeGT(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPriceChange), v))
	})
}

// PriceChangeGTE applies the GTE predicate on the "PriceChange" field.
func PriceChangeGTE(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPriceChange), v))
	})
}

// PriceChangeLT applies the LT predicate on the "PriceChange" field.
func PriceChangeLT(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPriceChange), v))
	})
}

// PriceChangeLTE applies the LTE predicate on the "PriceChange" field.
func PriceChangeLTE(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPriceChange), v))
	})
}

// PriceChangeContains applies the Contains predicate on the "PriceChange" field.
func PriceChangeContains(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPriceChange), v))
	})
}

// PriceChangeHasPrefix applies the HasPrefix predicate on the "PriceChange" field.
func PriceChangeHasPrefix(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPriceChange), v))
	})
}

// PriceChangeHasSuffix applies the HasSuffix predicate on the "PriceChange" field.
func PriceChangeHasSuffix(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPriceChange), v))
	})
}

// PriceChangeEqualFold applies the EqualFold predicate on the "PriceChange" field.
func PriceChangeEqualFold(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPriceChange), v))
	})
}

// PriceChangeContainsFold applies the ContainsFold predicate on the "PriceChange" field.
func PriceChangeContainsFold(v string) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPriceChange), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Stonks) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Stonks) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Stonks) predicate.Stonks {
	return predicate.Stonks(func(s *sql.Selector) {
		p(s.Not())
	})
}
