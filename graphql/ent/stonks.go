// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/molson82/jupiter/graphql/ent/stonks"
)

// Stonks is the model entity for the Stonks schema.
type Stonks struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// PriceChange holds the value of the "PriceChange" field.
	PriceChange string `json:"PriceChange,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Stonks) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case stonks.FieldID:
			values[i] = new(sql.NullInt64)
		case stonks.FieldSymbol, stonks.FieldPriceChange:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Stonks", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Stonks fields.
func (s *Stonks) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stonks.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case stonks.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				s.Symbol = value.String
			}
		case stonks.FieldPriceChange:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PriceChange", values[i])
			} else if value.Valid {
				s.PriceChange = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Stonks.
// Note that you need to call Stonks.Unwrap() before calling this method if this Stonks
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Stonks) Update() *StonksUpdateOne {
	return (&StonksClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Stonks entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Stonks) Unwrap() *Stonks {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Stonks is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Stonks) String() string {
	var builder strings.Builder
	builder.WriteString("Stonks(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", symbol=")
	builder.WriteString(s.Symbol)
	builder.WriteString(", PriceChange=")
	builder.WriteString(s.PriceChange)
	builder.WriteByte(')')
	return builder.String()
}

// StonksSlice is a parsable slice of Stonks.
type StonksSlice []*Stonks

func (s StonksSlice) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
