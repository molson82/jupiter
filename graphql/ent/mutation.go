// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/molson82/jupiter/graphql/ent/predicate"
	"github.com/molson82/jupiter/graphql/ent/stonks"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeStonks = "Stonks"
)

// StonksMutation represents an operation that mutates the Stonks nodes in the graph.
type StonksMutation struct {
	config
	op            Op
	typ           string
	id            *int
	symbol        *string
	_PriceChange  *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Stonks, error)
	predicates    []predicate.Stonks
}

var _ ent.Mutation = (*StonksMutation)(nil)

// stonksOption allows management of the mutation configuration using functional options.
type stonksOption func(*StonksMutation)

// newStonksMutation creates new mutation for the Stonks entity.
func newStonksMutation(c config, op Op, opts ...stonksOption) *StonksMutation {
	m := &StonksMutation{
		config:        c,
		op:            op,
		typ:           TypeStonks,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStonksID sets the ID field of the mutation.
func withStonksID(id int) stonksOption {
	return func(m *StonksMutation) {
		var (
			err   error
			once  sync.Once
			value *Stonks
		)
		m.oldValue = func(ctx context.Context) (*Stonks, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Stonks.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStonks sets the old Stonks of the mutation.
func withStonks(node *Stonks) stonksOption {
	return func(m *StonksMutation) {
		m.oldValue = func(context.Context) (*Stonks, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StonksMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StonksMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *StonksMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSymbol sets the "symbol" field.
func (m *StonksMutation) SetSymbol(s string) {
	m.symbol = &s
}

// Symbol returns the value of the "symbol" field in the mutation.
func (m *StonksMutation) Symbol() (r string, exists bool) {
	v := m.symbol
	if v == nil {
		return
	}
	return *v, true
}

// OldSymbol returns the old "symbol" field's value of the Stonks entity.
// If the Stonks object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StonksMutation) OldSymbol(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSymbol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSymbol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSymbol: %w", err)
	}
	return oldValue.Symbol, nil
}

// ResetSymbol resets all changes to the "symbol" field.
func (m *StonksMutation) ResetSymbol() {
	m.symbol = nil
}

// SetPriceChange sets the "PriceChange" field.
func (m *StonksMutation) SetPriceChange(s string) {
	m._PriceChange = &s
}

// PriceChange returns the value of the "PriceChange" field in the mutation.
func (m *StonksMutation) PriceChange() (r string, exists bool) {
	v := m._PriceChange
	if v == nil {
		return
	}
	return *v, true
}

// OldPriceChange returns the old "PriceChange" field's value of the Stonks entity.
// If the Stonks object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StonksMutation) OldPriceChange(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPriceChange is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPriceChange requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriceChange: %w", err)
	}
	return oldValue.PriceChange, nil
}

// ResetPriceChange resets all changes to the "PriceChange" field.
func (m *StonksMutation) ResetPriceChange() {
	m._PriceChange = nil
}

// Op returns the operation name.
func (m *StonksMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Stonks).
func (m *StonksMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StonksMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.symbol != nil {
		fields = append(fields, stonks.FieldSymbol)
	}
	if m._PriceChange != nil {
		fields = append(fields, stonks.FieldPriceChange)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StonksMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case stonks.FieldSymbol:
		return m.Symbol()
	case stonks.FieldPriceChange:
		return m.PriceChange()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StonksMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case stonks.FieldSymbol:
		return m.OldSymbol(ctx)
	case stonks.FieldPriceChange:
		return m.OldPriceChange(ctx)
	}
	return nil, fmt.Errorf("unknown Stonks field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StonksMutation) SetField(name string, value ent.Value) error {
	switch name {
	case stonks.FieldSymbol:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSymbol(v)
		return nil
	case stonks.FieldPriceChange:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriceChange(v)
		return nil
	}
	return fmt.Errorf("unknown Stonks field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StonksMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StonksMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StonksMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Stonks numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StonksMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StonksMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StonksMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Stonks nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StonksMutation) ResetField(name string) error {
	switch name {
	case stonks.FieldSymbol:
		m.ResetSymbol()
		return nil
	case stonks.FieldPriceChange:
		m.ResetPriceChange()
		return nil
	}
	return fmt.Errorf("unknown Stonks field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StonksMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StonksMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StonksMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StonksMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StonksMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StonksMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StonksMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Stonks unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StonksMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Stonks edge %s", name)
}
